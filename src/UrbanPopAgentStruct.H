/*! @file UrbanPopAgentStruct.H
    \brief Contains #UrbanPopAgent class used for reading in UrbanPop data
    File automatically generated by UrbanPop-scripts/extract_urbanpop_feather.py
*/
#pragma once

#include <stdlib.h>
#include <string.h>
#include <fstream>
#include <sstream>

using std::string;
using float32_t = float;

const size_t PUMS_ID_LEN = 13;
const size_t NAICS_LEN = 7;

static string hh_type_descriptions[] = {"hh", "gq"};
static string hh_living_arrangement_descriptions[] = {"married", "male_no_spouse", "female_no_spouse", "alone", "not_alone"};
static string hh_has_kids_descriptions[] = {"no", "yes"};
static string hh_dwg_descriptions[] = {"single_fam_detach", "single_fam_attach", "2_unit", "3_4_unit", "5_9_unit", "10_19_unit", "20_49_unit", "GE50_unit", "mob_home", "other"};
static string hh_tenure_descriptions[] = {"own", "rent", "other"};
static string hh_vehicles_descriptions[] = {"01", "02", "03", "04", "05", "GE06"};
static string pr_sex_descriptions[] = {"female", "male"};
static string pr_race_descriptions[] = {"white", "blk_af_amer", "asian", "native_amer", "pac_island", "other", "mult"};
static string pr_hsplat_descriptions[] = {"no", "yes"};
static string pr_ipr_descriptions[] = {"L050", "050_099", "100_124", "125_149", "150_184", "185_199", "GE200"};
static string pr_emp_stat_descriptions[] = {"not.in.force", "unemp", "employed", "mil"};
static string pr_travel_descriptions[] = {"car_truck_van", "public_transportation", "bicycle", "walked", "motorcycle", "taxicab", "other", "wfh"};
static string pr_veh_occ_descriptions[] = {"drove_alone", "carpooled"};
static string pr_grade_descriptions[] = {"preschl", "kind", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "undergrad", "grad"};

struct UrbanPopAgent {

    int32_t p_id;
    int32_t h_id;
    int64_t geoid;
    float32_t latitude;
    float32_t longitude;
    int32_t hh_income;
    int8_t hh_size;
    int8_t hh_type;
    int8_t hh_living_arrangement;
    int8_t hh_age;
    int8_t hh_has_kids;
    int8_t hh_nb_wrks;
    int8_t hh_nb_non_wrks;
    int8_t hh_nb_adult_wrks;
    int8_t hh_nb_adult_non_wrks;
    int8_t hh_dwg;
    int8_t hh_tenure;
    int8_t hh_vehicles;
    int8_t pr_age;
    int8_t pr_sex;
    int8_t pr_race;
    int8_t pr_hsplat;
    int8_t pr_ipr;
    int8_t pr_emp_stat;
    int8_t pr_travel;
    int8_t pr_veh_occ;
    int16_t pr_commute;
    int8_t pr_grade;
    char pums_id[PUMS_ID_LEN];
    char pr_naics[NAICS_LEN];

    bool read_csv(std::ifstream &f) {
        auto split = [](const string &s, char delim) {
            std::vector<string> elems;
            std::stringstream ss(s);
            string item;
            while (std::getline(ss, item, delim)) elems.push_back(item);
            return elems;
        };

        string buf;
        if (!getline(f, buf)) return false;
        auto tokens = split(buf, ',');

        p_id = stoi(tokens[0]);
        h_id = stoi(tokens[1]);
        geoid = stol(tokens[2]);
        latitude = stof(tokens[3]);
        longitude = stof(tokens[4]);
        hh_income = stoi(tokens[5]);
        hh_size = stoi(tokens[6]);
        hh_type = stoi(tokens[7]);
        hh_living_arrangement = stoi(tokens[8]);
        hh_age = stoi(tokens[9]);
        hh_has_kids = stoi(tokens[10]);
        hh_nb_wrks = stoi(tokens[11]);
        hh_nb_non_wrks = stoi(tokens[12]);
        hh_nb_adult_wrks = stoi(tokens[13]);
        hh_nb_adult_non_wrks = stoi(tokens[14]);
        hh_dwg = stoi(tokens[15]);
        hh_tenure = stoi(tokens[16]);
        hh_vehicles = stoi(tokens[17]);
        pr_age = stoi(tokens[18]);
        pr_sex = stoi(tokens[19]);
        pr_race = stoi(tokens[20]);
        pr_hsplat = stoi(tokens[21]);
        pr_ipr = stoi(tokens[22]);
        pr_emp_stat = stoi(tokens[23]);
        pr_travel = stoi(tokens[24]);
        pr_veh_occ = stoi(tokens[25]);
        pr_commute = stoi(tokens[26]);
        pr_grade = stoi(tokens[27]);
        if (!tokens[28].empty()) strncpy(pums_id, tokens[28].c_str(), PUMS_ID_LEN);
        else memset(pums_id, 0, PUMS_ID_LEN);
        if (!tokens[29].empty()) strncpy(pr_naics, tokens[29].c_str(), NAICS_LEN);
        else memset(pr_naics, 0, NAICS_LEN);

        return true;
    }

    friend std::ostream& operator<<(std::ostream& os, const UrbanPopAgent& agent) {
        os << agent.p_id << ',';
        os << agent.h_id << ',';
        os << agent.geoid << ',';
        os << agent.latitude << ',';
        os << agent.longitude << ',';
        os << agent.hh_income << ',';
        os << (int)agent.hh_size << ',';
        os << (int)agent.hh_type << (agent.hh_type != -1 ? ":" + hh_type_descriptions[agent.hh_type] : "") << ",";
        os << (int)agent.hh_living_arrangement << (agent.hh_living_arrangement != -1 ? ":" + hh_living_arrangement_descriptions[agent.hh_living_arrangement] : "") << ",";
        os << (int)agent.hh_age << ',';
        os << (int)agent.hh_has_kids << (agent.hh_has_kids != -1 ? ":" + hh_has_kids_descriptions[agent.hh_has_kids] : "") << ",";
        os << (int)agent.hh_nb_wrks << ',';
        os << (int)agent.hh_nb_non_wrks << ',';
        os << (int)agent.hh_nb_adult_wrks << ',';
        os << (int)agent.hh_nb_adult_non_wrks << ',';
        os << (int)agent.hh_dwg << (agent.hh_dwg != -1 ? ":" + hh_dwg_descriptions[agent.hh_dwg] : "") << ",";
        os << (int)agent.hh_tenure << (agent.hh_tenure != -1 ? ":" + hh_tenure_descriptions[agent.hh_tenure] : "") << ",";
        os << (int)agent.hh_vehicles << (agent.hh_vehicles != -1 ? ":" + hh_vehicles_descriptions[agent.hh_vehicles] : "") << ",";
        os << (int)agent.pr_age << ',';
        os << (int)agent.pr_sex << (agent.pr_sex != -1 ? ":" + pr_sex_descriptions[agent.pr_sex] : "") << ",";
        os << (int)agent.pr_race << (agent.pr_race != -1 ? ":" + pr_race_descriptions[agent.pr_race] : "") << ",";
        os << (int)agent.pr_hsplat << (agent.pr_hsplat != -1 ? ":" + pr_hsplat_descriptions[agent.pr_hsplat] : "") << ",";
        os << (int)agent.pr_ipr << (agent.pr_ipr != -1 ? ":" + pr_ipr_descriptions[agent.pr_ipr] : "") << ",";
        os << (int)agent.pr_emp_stat << (agent.pr_emp_stat != -1 ? ":" + pr_emp_stat_descriptions[agent.pr_emp_stat] : "") << ",";
        os << (int)agent.pr_travel << (agent.pr_travel != -1 ? ":" + pr_travel_descriptions[agent.pr_travel] : "") << ",";
        os << (int)agent.pr_veh_occ << (agent.pr_veh_occ != -1 ? ":" + pr_veh_occ_descriptions[agent.pr_veh_occ] : "") << ",";
        os << agent.pr_commute << ',';
        os << (int)agent.pr_grade << (agent.pr_grade != -1 ? ":" + pr_grade_descriptions[agent.pr_grade] : "") << ",";
        os << string(agent.pums_id, PUMS_ID_LEN) << ",";
        os << string(agent.pr_naics, NAICS_LEN) << ",";

        return os;
    }
};
